from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.dispatcher import Dispatcher
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.filters import Text
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import logging
from pyairtable import Api

# Initialize FSM storage
memory_storage = MemoryStorage()

# Configure logging
logging.basicConfig(level=logging.INFO)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
token = "5579137805:AAEQrKtLv1c2C7kShgexMsmBxlrhSEFkHMM"
bot = Bot(token=token)
dp = Dispatcher(bot, storage=memory_storage)
headers = {"Accept-Language": "ru"}
api_airtable = 'keyQUfkbDSpJUEubX'
api = Api(api_airtable)
#costumers = api.all('appgShUNYK5MxG9PV', '–ö–ª–∏–µ–Ω—Ç—ã')
catalog = api.all('appgShUNYK5MxG9PV', '–¢–æ–≤–∞—Ä')
basket = dict()
temp = 0
telefone = ' '
email = ' '


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
markup_request = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton('–î–æ–±—Ä–æ –ø–æ–¥–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥ –°–ª–∞–¥–∫–æ–π –ø–æ–∫—É–ø–∫–∏',)
).add('‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö')

keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
button1 = ["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"]
button2 = ["–Ø –∑–Ω–∞—é, —á—Ç–æ –∑–∞–∫–∞–∑–∞—Ç—å"]
keyboard.row(*button1, *button2)

markup_request2 = ReplyKeyboardMarkup(resize_keyboard=True).row(
    KeyboardButton('500 - 1000'),
    KeyboardButton('1000 - 1500'),
    KeyboardButton('1500 - 2000'))
markup_request3 = ReplyKeyboardMarkup(resize_keyboard=True).row(
    KeyboardButton('–î–∞ —è —Ö–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â–µ —á—Ç–æ-–Ω–∏–±—É–¥—å'),
    KeyboardButton('–ù–µ—Ç'))

markup_request5 = ReplyKeyboardMarkup(resize_keyboard=True).row(
    KeyboardButton('–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –∫–∞–ª–µ–π–¥–æ—Å–∫–æ–ø'),
    KeyboardButton('–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π —É—Ç—Ä–µ–Ω–Ω–∏–∫')).row(
    KeyboardButton('–ù–æ–≤–æ–≥–æ–¥–Ω–∞—è –Ω–æ—á—å'),
    KeyboardButton('–î–µ—Ç—Å–∫–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫'),
    KeyboardButton('–í–µ—Å–µ–ª—ã–µ —Ä–µ–±—è—Ç–∞')).add('‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö')

Content = InlineKeyboardButton('–°–æ—Å—Ç–∞–≤', callback_data ='Content' )
Oder = InlineKeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å', callback_data= 'Oder')     
markup_inlinerequest1 = InlineKeyboardMarkup(row_width = 2).row(Content, Oder)

Phone = InlineKeyboardButton('–¢–µ–ª–µ—Ñ–æ–Ω', callback_data='phone')
Email = InlineKeyboardButton('–ü–æ—á—Ç–∞', callback_data= 'email')
markup_inlinerequest2 = InlineKeyboardMarkup(row_width=2).row(Phone, Email)





class InputUserData(StatesGroup):
    step_1 = State()
    step_2 = State()
    step_3 = State()


def get_keys(d):
    lst = basket.keys()
    ans = ''
    for i in range(lst):
        ans = f'{lst[i]}\n'
        ans += ans
    return ans


# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
@dp.message_handler(Text(equals='‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö'))
async def back(msg: types.Message):
    reply_text = "back‚úÖ"
    await msg.answer(reply_text,
                     reply_markup=markup_request2)

# –†–µ–∞–∫—Ü–∏—è –Ω–∞ /start
@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    await message.answer("–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?üëã", reply_markup=keyboard)
    global costumers
    costumers = api.all('appgShUNYK5MxG9PV', '–ö–ª–∏–µ–Ω—Ç—ã')
    lst = []

    for i in range(len(costumers)):
        lst.append(costumers[i].get('fields').get('Name'))
    if message.chat.username not in lst:
        api.create('appgShUNYK5MxG9PV', '–ö–ª–∏–µ–Ω—Ç—ã' , {"Name": message.chat.username, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ" : '0', "–ü–æ–¥–∞—Ä–æ–∫": '0', "–¢–µ–ª–µ—Ñ–æ–Ω" : '0',  "–ü–æ—á—Ç–∞": '0' }, typecast=True)
    
    
    
  


    
    
# –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
@dp.message_handler(Text(equals="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))
async def information(message: types.Message):
    await message.reply(f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n–ü—Ä–∏–≤–µ—Çüëã\n–Ø –±–æ—Ç,\n–∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –≤–∞–º –≤ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ —Å–ª–∞–¥–∫–∏—Ö –Ω–æ–≤–æ–≥–æ–¥–Ω–∏—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞ –°–ª–∞–¥–∫–∞—è –ø–æ–∫—É–ø–∫–∞.\n"
                        f"–Ø –º–æ–≥—É —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å –ª—é–±—ã–µ –≤–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã. \n"
                        f'‚ùóÔ∏è‚ùóÔ∏è–û–ß–ï–ù–¨ –í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø \n –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å –Ω–∏–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è "–ó–∞–∫–∞–∑–∞—Ç—å" –≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–∏—è—Ç–æ–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è'
                        f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî", reply_markup=markup_request2)

@dp.message_handler(Text(equals="–Ø –∑–Ω–∞—é, —á—Ç–æ –∑–∞–∫–∞–∑–∞—Ç—å"))
async def information(message: types.Message):
    await message.reply(f'–•–æ—Ä–æ—à–æ, –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã —Ç–æ–≤–∞—Ä—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ —Ü–µ–Ω–æ–≤—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', reply_markup=markup_request2)



@dp.message_handler(Text(equals="500 - 1000"))
async def Cheapest_items(message: types.Message):
    await message.reply(f'–í—Å–µ –ø–æ–¥–∞—Ä–∫–∏ –≤ —Ü–µ–Ω–æ–≤–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ 500 - 1000', reply_markup= markup_request5)
   
        



# –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
@dp.message_handler(Text(equals ='–î–∞ —è —Ö–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â–µ —á—Ç–æ-–Ω–∏–±—É–¥—å')) 
async def select(message: types.Message):
    
    await message.answer('–û—Ç–ª–∏—á–Ω–æüëç', reply_markup=markup_request5)

@dp.message_handler(Text(equals ='–ù–µ—Ç')) 
async def select(message: types.Message):
    
    await bot.send_message(message.chat.id, f'–û—Ç–ª–∏—á–Ω–æ —Ç–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–Ω—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –Ω–∞—à–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–∏ –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—Å—è —Å –≤–∞–º–∏ (–£–∫–∞–∂–∏—Ç–µ –ª–∏–±–æ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω, –ª–∏–±–æ –≤–∞—à—É –ø–æ—á—Ç—É)', reply_markup= markup_inlinerequest2)


    
# –ö–∞–∫–æ–π –ø–æ–¥–∞—Ä–æ–∫
@dp.message_handler(Text(equals=['–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –∫–∞–ª–µ–π–¥–æ—Å–∫–æ–ø', '–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π —É—Ç—Ä–µ–Ω–Ω–∏–∫', '–ù–æ–≤–æ–≥–æ–¥–Ω–∞—è –Ω–æ—á—å', '–í–µ—Å–µ–ª—ã–µ —Ä–µ–±—è—Ç–∞', '–î–µ—Ç—Å–∫–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫']))
async def name_product(message: types.Message):
    for i in range(len(catalog)):
        if str(message.text) in str(catalog[i].get('fields').get('Notes')):
            await bot.send_message(message.chat.id, f'–û—Ç–ª–∏—á–Ω–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è ' f' ' f"{catalog[i].get('fields').get('Notes')}")
            await bot.send_photo(message.chat.id, photo= catalog[i].get('fields').get('–§–æ—Ç–æ')[0].get('url'), reply_markup= markup_inlinerequest1)
            global temp 
            temp = i


# –°–æ—Å—Ç–∞–≤ –ø–æ–¥–∞—Ä–∫–∞
@dp.callback_query_handler(text = 'Content')
async def content_product(callback:types.CallbackQuery):
    await callback.message.answer(f"{catalog[temp].get('fields').get('–°–æ—Å—Ç–∞–≤')}")
    await callback.answer('')
    


    
#–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤
@dp.callback_query_handler(text = 'Oder')
async def num_product(callback:types.CallbackQuery):
    await callback.message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    basket[f"{catalog[temp].get('fields').get('Notes')}"] = 0 
    print(basket)
    await InputUserData.step_1.set()


@dp.message_handler(state=InputUserData.step_1, content_types=types.ContentTypes.TEXT)
async def questionnaire_state_1_message(message: types.Message, state: FSMContext):
        global costumers
        costumers = api.all('appgShUNYK5MxG9PV', '–ö–ª–∏–µ–Ω—Ç—ã')
        async with state.proxy() as basket:
            basket[catalog[temp].get('fields').get('Notes')] = message.text.replace('\n',' ') 
            print(basket)
            for i in range(len(costumers)):
                    if message.chat.username == costumers[i]['fields']['Name']:
                             api.update('appgShUNYK5MxG9PV','–ö–ª–∏–µ–Ω—Ç—ã',costumers[i]['id'], {'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': str(basket.values())[14:len(str(basket.values())) - 3]})
                             api.update('appgShUNYK5MxG9PV','–ö–ª–∏–µ–Ω—Ç—ã',costumers[i]['id'], {'–ü–æ–¥–∞—Ä–æ–∫': '\n'.join(basket.keys())})

            await state.finish()
            await bot.send_message(message.chat.id, f'–•–æ—Ç–µ–ª–∏ –±—ã –≤—ã –∑–∞–∫–∞–∑–∞—Ç—å, —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?', reply_markup= markup_request3)
            #await bot.send_message(message.chat.id, f'–û—Ç–ª–∏—á–Ω–æ —Ç–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–Ω—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –Ω–∞—à–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–∏ –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—Å—è —Å –≤–∞–º–∏', reply_markup= markup_inlinerequest2)



# –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è   
@dp.callback_query_handler(text = 'phone')
async def phone_costumers(callback:types.CallbackQuery):
    await callback.message.answer('–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω')
    await InputUserData.step_2.set()

@dp.message_handler(state=InputUserData.step_2, content_types=types.ContentType.TEXT) 
async def questionnaire_state_2_message(message: types.Message, state: FSMContext):
    global telefone
    global costumers
    costumers = api.all('appgShUNYK5MxG9PV', '–ö–ª–∏–µ–Ω—Ç—ã')
    async with state.proxy() as telefone:
        telefone = message.text.replace('\n', ' ')
        for i in range(len(costumers)):
            if message.chat.username == costumers[i]['fields']['Name']:
                api.update('appgShUNYK5MxG9PV','–ö–ª–∏–µ–Ω—Ç—ã',costumers[i]['id'],{'–¢–µ–ª–µ—Ñ–æ–Ω': str(telefone)})
            await state.finish()
    await bot.send_message(message.chat.id, f'–°–ø–∞—Å–∏–±–æ,{message.chat.username} , –∑–∞ –∑–∞–∫–∞–∑. –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.')

@dp.callback_query_handler(text = 'email')
async def phone_costumers(callback:types.CallbackQuery):
    await callback.message.answer('–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É')
    await InputUserData.step_3.set()

@dp.message_handler(state=InputUserData.step_3, content_types=types.ContentType.TEXT) 
async def questionnaire_state_3_message(message: types.Message, state: FSMContext):
    global email
    global costumers
    global F
    costumers = api.all('appgShUNYK5MxG9PV', '–ö–ª–∏–µ–Ω—Ç—ã')
    async with state.proxy() as email:
        email = message.text.replace('\n', ' ')
        for i in range(len(costumers)):
            if message.chat.username == costumers[i]['fields']['Name']:
                api.update('appgShUNYK5MxG9PV','–ö–ª–∏–µ–Ω—Ç—ã',costumers[i]['id'],{'–ü–æ—á—Ç–∞': str(email)})
            await state.finish()
    await bot.send_message(message.chat.id, f'–°–ø–∞—Å–∏–±–æ, {message.chat.username}, –∑–∞ –∑–∞–∫–∞–∑. –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.')






     
    

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)